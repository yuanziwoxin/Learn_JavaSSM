<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.4//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yuan.oa.dao.ClaimVoucherDao">
    <resultMap id="claimVoucher" type="com.yuan.oa.entity.ClaimVoucher">
        <id property="id" column="id" javaType="Integer"/>
        <result property="cause" column="cause" javaType="String"/>
        <result property="createSn" column="create_sn" javaType="String"/>
        <result property="createTime" column="create_time" javaType="java.util.Date"/>
        <result property="nextDealSn" column="next_deal_sn" javaType="String"/>
        <result property="totalAmount" column="total_amount" javaType="Double"/>
        <result property="status" column="status" javaType="String"/>
        <association property="creater" column="create_sn" javaType="Employee">
            <!--获取需要的创建人姓名和职务，将这两个字段分别进行关联-->
            <!--
            注意：
            （1）如果这里的column属性的属性值与上面的column属性的属性值无重复，则可以不配置关联；
            （2）如果有重复（相同），则这里的配置的column属性的属性值必须改成与上面不相同，
                且这里的column属性的属性值必须与下面SQL语句中字段名的别名一致；
            -->
            <result property="name" column="cname" javaType="String"/>
            <result property="post" column="cpost" javaType="String"/>
        </association>
        <association property="nextDealer" column="next_deal_sn" javaType="Employee">
            <result property="name" column="dealname" javaType="String"/>
            <result property="post" column="dealpost" javaType="String"/>
        </association>
    </resultMap>

    <!--
    注意：
      在保存报销单信息的时候，我们不仅需要在报销单表中插入一条信息，
      同时还需要在报销单明细表中插入其相关联的报销单明细信息，因此我们需要报销单表该条记录的主键，
      但是我们在插入之前是无法知道插入这个对象的主键的，因为这个主键是插入之后在数据库中自动生成的，
      所以我们这里打开主键自动生成（useGeneratedKeys="true"），然后将自动生成的主键保存在ClaimVoucher
      这个对象的id属性中
    -->
    <insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="ClaimVoucher">
        insert into claim_voucher(cause,create_sn,create_time,next_deal_sn,total_amount,status)
        values (#{cause},#{createSn},#{createTime},#{nextDealSn},#{totalAmount},#{status})
    </insert>

    <update id="update" parameterType="ClaimVoucher">
        update claim_voucher set cause=#{cause},create_sn=#{createSn},create_time=#{createTime},
        next_deal_sn=#{nextDealSn},total_amount=#{totalAmount},status=#{status}
        where id=#{id}
    </update>

    <delete id="delete" parameterType="Integer">
        delete from claim_voucher  where id=#{id}
    </delete>

    <!--根据报销单编号查询报销单-->
    <!--claim_voucher两次连接employee进行查询-->
    <select id="seleteOne" parameterType="Integer" resultMap="claimVoucher">
        select cv.*,c.name cname,c.post cpost,d.name dealname,d.post dealpost
        from claim_voucher cv
        left join employee c on c.ename=cv.create_sn
        left join employee d on d.ename=cv.next_deal_sn
        where cv.id=#{id}
    </select>
    <!--根据创建人编号查询其所有的报销单-->
    <select id="selectByCreater" parameterType="String" resultMap="claimVoucher">
        select cv.*,c.name cname,c.post cpost,d.name dealname,d.post dealpost
        from claim_voucher cv
        left join employee c on c.ename=cv.create_sn
        left join employee d on d.ename=cv.next_deal_sn
        where cv.create_sn=#{createSn} order by cv.create_time desc
    </select>
    <!--根据待处理人编号查询其所有要处理的报销单-->
    <select id="selectByNextDealer" parameterType="String" resultMap="claimVoucher">
        select cv.*,c.name cname,c.post cpost,d.name dealname,d.post dealpost
        from claim_voucher cv
        left join employee c on c.ename=cv.create_sn
        left join employee d on d.ename=cv.next_deal_sn
        where cv.next_deal_sn=#{nextDealSn} order by cv.create_time desc
    </select>
</mapper>