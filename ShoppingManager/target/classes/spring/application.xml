<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
      				  http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
      				  http://www.springframework.org/schema/tx
      				  http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
      				  http://www.springframework.org/schema/context
      				  http://www.springframework.org/schema/context/spring-context-4.0.xsd
      				  ">
	<!--
	 声明用了annotation注解bean
	 开启组件扫描：它会到基础包扫描
	 @Service @Repository @Controller @Component
	 这四种注解声明的bean，扫描后会将这些bean交给Spring容器管理
	-->
	<!--配置spring注解的扫描器-->
	<context:component-scan base-package="com.yuan.shop"/>
	<!--
	配置数据源
	C3P0作为数据源

	如果像下面这样配置的话，它会默认到resources资源文件夹下加载c3p0.properties的配置文件
	-->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"></bean>

	<!--
	配置连接工厂SessionFactory
	MyBatis+Spring
	-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" p:dataSource-ref="dataSource">
		<!--
		扫描类型，并为类型配置别名：
		采用包扫描的方式到基础包下扫描所有的类，作为MyBatis能够转换的类型，
		多个包之间用“;”分隔
		-->
		<property name="typeAliasesPackage">
			<value>
				com.yuan.shop.bean
			</value>
		</property>
	</bean>

	<!--配置扫描数据访问层(持久层，即DAO)接口的路径，并为数据访问层接口作实现类对象-->
    <!--
    配置数据访问接口：采用包扫描的方式到基础包下扫描所有的类，作为MyBatis的数据访问接口，
    并创建这些类的代理对象，创建出来后会把这些代理交给Spring容器管理，bean的id名默认为
    接口的类名前面首字母小写，多个包之间用“;”分隔
    -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" p:sqlSessionFactoryBeanName="sqlSessionFactory">
	   <property name="basePackage">
		   <value>
			   com.yuan.shop.repository
		   </value>
	   </property>
   </bean>

	<!--配置事务管理器-->
   <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" p:dataSource-ref="dataSource">
   </bean>

	<!--声明式事务，使用事务注解的方式控制业务层的事务-->
	<!--开启annotation注解事务-->
   <tx:annotation-driven transaction-manager="transactionManager"/>

</beans>